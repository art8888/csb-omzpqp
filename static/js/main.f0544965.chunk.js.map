{"version":3,"sources":["components/OrcReader.js","components/TextReader.js","App.js","index.js"],"names":["STATUSES","OcrReader","onReadOcrData","onRemoveClicked","useState","selectedImage","setSelectedImage","ocrState","setOcrState","worker","createWorker","readImageText","load","loadLanguage","initialize","recognize","text","data","terminate","console","log","src","URL","createObjectURL","alt","className","onClick","disabled","type","name","onChange","event","target","files","TextReader","readText","useRef","App","orcData","setOcrData","onReaderOcrData","ocrData","rootElement","document","getElementById","createRoot","render"],"mappings":"+JAGMA,EACE,GADFA,EAEI,wBAFJA,EAGK,gBAHLA,EAIM,YAwEGC,MArEf,SAAmB,GAAqC,IAAnCC,EAAa,EAAbA,cAAeC,EAAe,EAAfA,gBAClC,EAA0CC,mBAAS,MAAK,mBAAjDC,EAAa,KAAEC,EAAgB,KACtC,EAAgCF,mBAASJ,GAAc,mBAAhDO,EAAQ,KAAEC,EAAW,KACtBC,EAASC,yBAETC,EAAa,iDAAG,gGACU,OAA9BH,EAAYR,GAAkB,kBAEtBS,EAAOG,OAAO,KAAD,kBACbH,EAAOI,aAAa,OAAO,KAAD,kBAC1BJ,EAAOK,WAAW,OAAO,KAAD,mBAGpBL,EAAOM,UAAUV,GAAe,KAAD,GAD3B,OAC2B,SAD/BW,EAAI,EAAZC,KAAQD,KAAI,UAERP,EAAOS,YAAY,KAAD,GACxBC,QAAQC,IAAIJ,GACZG,QAAQC,IAAI,2BACZlB,EAAcc,GACdR,EAAYR,GAAmB,kDAE/BQ,EAAYR,GAAiB,0DAEhC,kBAjBkB,mCAyBnB,OACE,gCACGK,GACC,8BACE,qBAAKgB,IAAKC,IAAIC,gBAAgBlB,GAAgBmB,IAAI,mBAGtD,8BACGnB,EACC,sBAAKoB,UAAU,mBAAkB,UAC/B,wBAAQC,QAASf,EAAc,SAAC,+BAChC,wBACEc,UAAU,gBACVE,SAAUpB,IAAaP,EACvB0B,QApBgB,WAC1BpB,EAAiB,MACjBH,IACAK,EAAYR,EACd,EAgByC,SAC9B,yBAKH,qCACE,4BAAG,+BACH,uBACE4B,KAAK,OACLC,KAAK,YACLC,SAAU,SAACC,GACTzB,EAAiByB,EAAMC,OAAOC,MAAM,GACtC,IAEF,4BAAG,+CAIT,qBAAKR,UAAU,SAAQ,SAAElB,IACzB,yBAGN,EC5Ce2B,MA/Bf,SAAoB,GAAe,IAAbC,EAAQ,EAARA,SACpB,EAA8B/B,mBAAS+B,GAAS,mBAAlC,KAAY,KACTC,iBAAO,KA2B1B,ECJeC,MAvBf,WACE,MAA8BjC,mBAAS,IAAG,mBAAnCkC,EAAO,KAAEC,EAAU,KAU1B,OACE,sBAAKd,UAAU,MAAK,UAClB,iCAAQ,4CACR,cAAC,EAAS,CACRe,gBAZkB,SAACC,GACvBF,EAAWE,EACb,EAWMtC,gBATkB,WACtBoC,EAAW,GACb,IASKD,GAAW,cAAC,EAAU,CAACH,SAAUG,MAGxC,ECpBMI,EAAcC,SAASC,eAAe,QAC/BC,qBAAWH,GAEnBI,OACH,cAAC,aAAU,UACT,cAAC,EAAG,M","file":"static/js/main.f0544965.chunk.js","sourcesContent":["import { useState } from \"react\";\nimport { createWorker } from \"tesseract.js\";\n\nconst STATUSES = {\n  IDLE: \"\",\n  FAILED: \"Failed to perform OCR\",\n  PENDING: \"Processing...\",\n  SUCEEDED: \"Completed\"\n};\n\nfunction OcrReader({ onReadOcrData, onRemoveClicked }) {\n  const [selectedImage, setSelectedImage] = useState(null);\n  const [ocrState, setOcrState] = useState(STATUSES.IDLE);\n  const worker = createWorker();\n\n  const readImageText = async () => {\n    setOcrState(STATUSES.PENDING);\n    try {\n      await worker.load();\n      await worker.loadLanguage(\"eng\");\n      await worker.initialize(\"eng\");\n      const {\n        data: { text }\n      } = await worker.recognize(selectedImage);\n      await worker.terminate();\n      console.log(text);\n      console.log(\"------- text ----------\");\n      onReadOcrData(text);\n      setOcrState(STATUSES.SUCEEDED);\n    } catch (err) {\n      setOcrState(STATUSES.FAILED);\n    }\n  };\n\n  const handleRemoveClicked = () => {\n    setSelectedImage(null);\n    onRemoveClicked();\n    setOcrState(STATUSES.IDLE);\n  };\n\n  return (\n    <div>\n      {selectedImage && (\n        <div>\n          <img src={URL.createObjectURL(selectedImage)} alt=\"scanned file\" />\n        </div>\n      )}\n      <div>\n        {selectedImage ? (\n          <div className=\"button-container\">\n            <button onClick={readImageText}>Process the image with OCR</button>\n            <button\n              className=\"remove-button\"\n              disabled={ocrState === STATUSES.PENDING}\n              onClick={handleRemoveClicked}\n            >\n              Use another image\n            </button>\n          </div>\n        ) : (\n          <>\n            <p>Upload an image to process</p>\n            <input\n              type=\"file\"\n              name=\"ocr-image\"\n              onChange={(event) => {\n                setSelectedImage(event.target.files[0]);\n              }}\n            />\n            <p>Supported formats: bmp, jpg, png, pbm</p>\n          </>\n        )}\n      </div>\n      <div className=\"status\">{ocrState}</div>\n      <br />\n    </div>\n  );\n}\n\nexport default OcrReader;\n","import { useEffect, useState, useRef } from \"react\";\n\nfunction TextReader({ readText }) {\n  const [smsText, setSmsText] = useState(readText);\n  const inputRef = useRef(null);\n\n  const handleSubmit = (e) => {\n    e.preventDefault();\n    e.stopPropagation();\n\n    return (\n      <div>\n        <form onSubmit={(e) => handleSubmit(e)}>\n          <div>Recognized text:</div>\n          <div>\n            <textarea\n              rows=\"15\"\n              cols=\"45\"\n              name=\"name\"\n              defaultValue={readText}\n              onChange={(e) => setSmsText(e.target.value)}\n            />\n          </div>\n          <div>\n            <input ref={inputRef} id=\"phone\" name=\"phone\" type=\"tel\" />\n          </div>\n          <div className=\"status\">{smsText}</div>\n        </form>\n      </div>\n    );\n  };\n}\n\nexport default TextReader;\n","import React from \"react\";\nimport { useState } from \"react\";\nimport { OcrReader, TextReader } from \"./components\";\n\nfunction App() {\n  const [orcData, setOcrData] = useState(\"\");\n\n  const onReaderOcrData = (ocrData) => {\n    setOcrData(ocrData);\n  };\n\n  const onRemoveClicked = () => {\n    setOcrData(\"\");\n  };\n\n  return (\n    <div className=\"App\">\n      <header>OCR(Optical Character Recognition) app!</header>\n      <OcrReader\n        onReaderOcrData={onReaderOcrData}\n        onRemoveClicked={onRemoveClicked}\n      />\n      {orcData && <TextReader readText={orcData} />}\n    </div>\n  );\n}\n\nexport default App;\n","import { StrictMode } from \"react\";\nimport { createRoot } from \"react-dom/client\";\n\nimport App from \"./App\";\n\nconst rootElement = document.getElementById(\"root\");\nconst root = createRoot(rootElement);\n\nroot.render(\n  <StrictMode>\n    <App />\n  </StrictMode>\n);\n"],"sourceRoot":""}